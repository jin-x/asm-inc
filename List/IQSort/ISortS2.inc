;##################################################
;##                                              ##
;##        [ Asm7x.List ][ ISortS2.inc ]         ##
;##                                              ##
;##             -= Insertion Sort =-             ##
;##         (for double element arrays)          ##
;##                                              ##
;##             Сортировка вставками             ##
;##     (для массивов с двойными элементами)     ##
;##                                              ##
;##           [ v1.00 :: 11.11.2017 ]            ##
;##              MASM/TASM (16 bit)              ##
;##                                              ##
;##     (c) 2017 by Jin X (jin.x@sources.ru)     ##
;##             http://xk7.ru/p/a/i              ##
;##                                              ##
;##################################################

IFDEF		??Version	; TASM
  LOCALS
ENDIF

ISortS2_ver	=	100h			; версия данного модуля (word: старший байт - целая часть, младший - дробная)

; !!! В данном модуле используется ЗНАКОВОЕ сравнение значений и сортировка по ВОЗРАСТАНИЮ (от меньшего к большему)
; !!! Для замены на БЕЗзнаковое сравнение или сортировку по УБЫВАНИЮ необходимо изменить соответствующие инструкции, помеченные в комментариях символами ***

;-----------------------------------------------------------------------------------------------------------------------

;-- InsSortDE: СОРТИРОВКА массива ВСТАВКАМИ ----------------------------------------------------------------------------
; > Входные данные: DS:DX = адрес массива, CX = кол-во элементов массива (знаковое значение)
; > Результат: отсортированный массив (по тому же адресу)
; Элементы массива содержат по 2 значения типа WORD:
;   * первое слово содержит опорное значение (по которому происходит сравнение),
;   * второе слово - связанные с элементом данные (обычно это указатель на данные);
;     при сортировке связанные данные переносятся вместе с опорными значениями
; Процедура изменяет регистры AX, BX, SI, DI, сохраняет CX, DX, BP и сегментные регистры
InsSortDE	PROC
		dec	cx
		jle	@@exit			; выходим, если кол-во элементов <= 1

		shl	cx,2
		add	cx,dx			; CX = адрес последнего элемента

		; Главная процедура сортировки вставками
		; DX = адрес первого элемента, CX = адрес последнего элемента, CX > DX
		push	bp
		mov	di,dx			; J (DI) := L - адрес первого элемента
	@@next:					;; for J (DI) := L+1 (CX) to R (DX) do
		add	di,4			; J++ (DI) - адрес следующего проверяемого элемента (в основном цикле)
		mov	bx,[di]			;; T (BP:BX) := [J]
		mov	bp,[di+2]
		mov	si,di			; I+1 (SI) = DI - адрес элемента, следующего за сравниваемым (во внутреннем цикле)
	@@loop:					;; repeat
		mov	ax,[si-4]
		cmp	ax,bx			;; if [I] > T then
		jle	@@break			; прыгаем, если [I] <= T {*** сортировка по возрастанию: jle - знаковое сравнение, jbe - беззнаковое; по убыванию: jge - знаковое, jae - беззнаковое}

		mov	[si],ax			;;  [I+1] := [I] else Break
		mov	ax,[si-4+2]
		mov	[si+2],ax

		sub	si,4			;; Dec(I)
		cmp	si,dx
		jnbe	@@loop			;; until I < L (I+1 <= L)
	@@break:
		mov	[si],bx			;; [I+1] := T
		mov	[si+2],bp

		cmp	di,cx
		jnae	@@next			; следующий элемент массива ;; end for

		pop	bp
	@@exit:	ret
InsSortDE	ENDP
