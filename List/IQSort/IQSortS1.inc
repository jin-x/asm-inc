;##################################################
;##                                              ##
;##        [ Asm7x.List ][ IQSortS1.inc ]        ##
;##                                              ##
;##            -= Smart Quick Sort =-            ##
;##           (single element arrays)            ##
;##                                              ##
;##           Умная быстрая сортировка           ##
;##    (для массивов с одиночными элементами)    ##
;##                                              ##
;##           [ v1.00 :: 11.11.2017 ]            ##
;##              MASM/TASM (16 bit)              ##
;##                                              ##
;##     (c) 2017 by Jin X (jin.x@sources.ru)     ##
;##             http://xk7.ru/p/a/i              ##
;##                                              ##
;##################################################

IFDEF		??Version	; TASM
  LOCALS
ENDIF

IQSortS1_ver	=	100h			; версия данного модуля (word: старший байт - целая часть, младший - дробная)

; !!! В данном модуле используется ЗНАКОВОЕ сравнение значений и сортировка по ВОЗРАСТАНИЮ (от меньшего к большему)
; !!! Для замены на БЕЗзнаковое сравнение или сортировку по УБЫВАНИЮ необходимо изменить соответствующие инструкции, помеченные в комментариях символами ***

; IQSortInsThrs = порог использования сортировки вставками (когда кол-во элементов меньше указанного здесь значения) [минимум 2; по умолчанию 16]
;   Если кол-во элементов (на первой или последующей итерации) больше или равно значению IQSortInsThrs, используется быстрая сортировка, иначе
;   используется сортировка вставками - это немного ускоряет процесс (при правильном выборе значения IQSortInsThrs, например, при значении по умолчанию)
;   и уменьшает глубину рекурсии
IQSortInsThrs	=	16

; IQSortMaxStk = максимальный размер стека в байтах, который допустимо использовать процедуре IQSort (включая call из основного кода) [минимум 10; по умолчанию 128]
;   Каждый уровень вложенности использует 4 байта (2 слова) стека (первый уровень - до 4-х слов, последний может использовать на 1 слово больше, итого минимум 10 байт),
;   т.о. 128 байт позволяют организовать до 30 уровней рекурсии, что достаточно даже для очень больших массивов
IQSortMaxStk	=	128

;-----------------------------------------------------------------------------------------------------------------------

;-- IQSort: Умная БЫСТРАЯ СОРТИРОВКА массива (комбинированным методом) -------------------------------------------------
; > Входные данные: DS:DX = адрес массива, CX = кол-во элементов массива (знаковое значение)
; > Результат: отсортированный массив (по тому же адресу)
; Элементы массива содержат по 1 значению типа WORD, по которому происходит сравнение и сортировка
; Если кол-во элементов (на первой или последующей итерации) больше или равно значению IQSortInsThrs, используется быстрая сортировка,
;   иначе используется сортировка вставками
; Сортировка вставками также используется, если для следующего уровня рекурсии потребуется более IQSortMaxStk байт стека в общем сложности
; Процедура изменяет регистры AX, BX, CX, DX, SI, DI, сохраняет BP и сегментные регистры
IQSort		PROC
		dec	cx
		jle	@@exit			; выходим, если кол-во элементов <= 1

		push	bp
		xor	bp,bp			; BP = кол-во рекурсий
		shl	cx,1
		add	cx,dx			; CX = адрес последнего элемента

		; Главная процедура быстрой сортировки
		; DX = адрес первого элемента, CX = адрес последнего элемента, CX > DX, BP = уровень рекурсии
	@@IQSortMain:
		mov	ax,cx
		sub	ax,dx
		shr	ax,1			; AX = кол-во элементов минус 1
		cmp	ax,IQSortInsThrs-1
		jb	@@callins		; если кол-во элементов меньше порогового значения, используем сортировку вставками

		mov	si,dx			;; I (SI) := L (DX)
	@@repeat1:				;; repeat
		mov	di,cx			;; J (DI) := R (CX)
		mov	bx,cx
		sub	bx,dx
		shr	bx,1
		and	bx,-2
		add	bx,dx			;; P (BX) := (L + R) / 2
		mov	ax,[bx]			;; T (AX) := [P]
	@@repeat2 = @@cmpI			;; repeat
		; SI = I, AX = T, DI = J, DX = L, CX = R
		jmp	@@cmpI
	@@addI:	add	si,2			;; Inc(I)
	@@cmpI:	cmp	[si],ax			;; while [I] < T
		jl	@@addI			; {*** сортировка по возрастанию: jl - знаковое сравнение, jb - беззнаковое; по убыванию: jg - знаковое, ja - беззнаковое}

		jmp	@@cmpJ
	@@subJ:	sub	di,2			;; Dec(J)
	@@cmpJ:	cmp	[di],ax			;; while [J] > T
		jg	@@subJ			; {*** сортировка по возрастанию: jg - знаковое сравнение, ja - беззнаковое; по убыванию: jl - знаковое, jb - беззнаковое}

		cmp	si,di
		jnbe	@@noswap		;; if I <= J then

		mov	bx,[si]			;;   Swap [I],[J]
		xchg	[di],bx
		mov	[si],bx

		add	si,2			;; Inc(I)
		sub	di,2			;; Dec(J)
	@@noswap:
		cmp	si,di
		jna	@@repeat2		;; until I > J

		cmp	dx,di
		jnb	@@norecurs		;; if L < J then

		push	cx
		push	si			; сохраняем R и I
		mov	cx,di
		; DX = L, CX = J
		cmp	bp,(IQSortMaxStk-10)/4	; 5 слов - это адрес возврата в вызываемую программу + bp + cx + si + адрес возврата из InsSort
		jae	@@callins2		; если число рекурсий достигло максимума, идём на вызов сортировки вставками: InsSort(L, J)
		inc	bp			; иначе увеличиваем глубину рекурсии и идём на рекурсию
		jmp	@@IQSortMain		;;   IQSort(L, J); вызов делаем через jmp для экономии стека :)
	@@recursret:
		pop	si
		pop	cx			; восстанавливаем I и R
	@@norecurs:
		mov	dx,si			;; L := I
		cmp	si,cx
		jnae	@@repeat1		;; until I >= R
	@@finish:
		dec	bp			; уменьшаем глубину рекурсии
		jns	@@recursret		; прыгаем, если это не первый (корневой) уровень рекурсии
		pop	bp
	@@exit:	ret

	@@callins:
		push	offset @@finish		; адрес возврата
		jmp	@IQInsSort		; вместо call + jmp @@finish делаем push + jmp
	@@callins2:
		push	offset @@recursret	; адрес возврата
		jmp	@IQInsSort		; вместо call + jmp @@recursret делаем push + jmp
IQSort		ENDP

;-- InsSort: СОРТИРОВКА массива ВСТАВКАМИ ------------------------------------------------------------------------------
; > Входные данные: DS:DX = адрес массива, CX = кол-во элементов массива (знаковое значение)
; > Результат: отсортированный массив (по тому же адресу)
; Элементы массива содержат по 1 значению типа WORD, по которому происходит сравнение и сортировка
; Процедура изменяет регистры AX, BX, SI, DI, сохраняет CX, DX, BP и сегментные регистры
InsSort		PROC
		dec	cx
		jle	@@exit			; выходим, если кол-во элементов <= 1

		shl	cx,1
		add	cx,dx			; CX = адрес последнего элемента

		; Главная процедура сортировки вставками
		; DX = адрес первого элемента, CX = адрес последнего элемента, CX > DX
IFDEF		??Version	; TASM
  @IQInsSort:
ELSE				; MASM
  @IQInsSort::
ENDIF
		mov	di,dx			; J (DI) := L - адрес первого элемента
	@@next:					;; for J (DI) := L+1 (CX) to R (DX) do
		add	di,2			; J++ (DI) - адрес следующего проверяемого элемента (в основном цикле)
		mov	bx,[di]			;; T (BX) := [J]
		mov	si,di			; I+1 (SI) := DI - адрес элемента, следующего за сравниваемым (во внутреннем цикле)
	@@loop:					;; repeat
		mov	ax,[si-2]
		cmp	ax,bx			;; if [I] > T then
		jle	@@break			; прыгаем, если [I] <= T {*** сортировка по возрастанию: jle - знаковое сравнение, jbe - беззнаковое; по убыванию: jge - знаковое, jae - беззнаковое}

		mov	[si],ax			;;  [I+1] := [I] else Break

		sub	si,2			;; Dec(I)
		cmp	si,dx
		jnbe	@@loop			;; until I < L (I+1 <= L)
	@@break:
		mov	[si],bx			;; [I+1] := T

		cmp	di,cx
		jnae	@@next			; следующий элемент массива ;; end for
	@@exit:	ret
InsSort		ENDP
